<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32_GRBl_Advanced\STM32_GRBl_Advanced.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32_GRBl_Advanced\STM32_GRBl_Advanced.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Oct 09 09:36:12 2018
<BR><P>
<H3>Maximum Stack Usage =        888 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Grbl_loop &rArr; Protocol_MainLoop &rArr; System_ExecuteLine &rArr; GC_ExecuteLine &rArr; MC_Arc &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[fe]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">_Error_Handler</a><BR>
 <LI><a href="#[6b]">Delay_sec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">Protocol_ExecuteRealtime</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from global.o(i.TIM4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[39]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[169]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[16a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[16b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[16c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[16d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[16e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Reset
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[80]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_motion_reset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_UpdatePlannerBlockParams
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileParams
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Float
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ConvertAxisSteps2Mpos
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GrblSettings
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>

<P><STRONG><a name="[84]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>

<P><STRONG><a name="[174]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileNominalSpeed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Float
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_RateValue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_CoordValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[81]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[175]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ConvertAxisSteps2Mpos
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Float
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileNominalSpeed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_motion_reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileNominalSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Float
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_RateValue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_CoordValue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileNominalSpeed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Float
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_RateValue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_CoordValue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_CheckTravelLimits
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileNominalSpeed
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileParams
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[178]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[179]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
</UL>

<P><STRONG><a name="[40]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[49]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[48]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[56]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[57]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>_dfix_r</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dfixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _dfix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[5c]"></a>Arm_motion_reset</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, arm_motion.o(i.Arm_motion_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Arm_motion_reset &rArr; lround &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_setup
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Coolant_GetState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, coolantcontrol.o(i.Coolant_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Coolant_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
</UL>

<P><STRONG><a name="[62]"></a>Coolant_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, coolantcontrol.o(i.Coolant_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Coolant_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitGPIO
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>

<P><STRONG><a name="[65]"></a>Coolant_SetState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, coolantcontrol.o(i.Coolant_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Coolant_SetState
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Sync
</UL>

<P><STRONG><a name="[64]"></a>Coolant_Stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, coolantcontrol.o(i.Coolant_Stop))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
</UL>

<P><STRONG><a name="[67]"></a>Coolant_Sync</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, coolantcontrol.o(i.Coolant_Sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Coolant_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_SetState
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system32.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AlarmMessage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GrblSettings
</UL>

<P><STRONG><a name="[6b]"></a>Delay_sec</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, util.o(i.Delay_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + In Cycle
<LI>Call Chain = Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Dwell
</UL>

<P><STRONG><a name="[6a]"></a>Delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system32.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[6f]"></a>EE_Erase</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, eeprom.o(i.EE_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EE_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Program
</UL>

<P><STRONG><a name="[73]"></a>EE_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eeprom.o(i.EE_Init))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Init
</UL>

<P><STRONG><a name="[75]"></a>EE_Program</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, eeprom.o(i.EE_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EE_Program &rArr; EE_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_WriteCoordData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGlobalSettings
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreBuildInfo
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Restore
</UL>

<P><STRONG><a name="[12a]"></a>EE_ReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eeprom.o(i.EE_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGlobalSettings
</UL>

<P><STRONG><a name="[12b]"></a>EE_ReadByteArray</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eeprom.o(i.EE_ReadByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EE_ReadByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_ReadCoordData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_ReadBuildInfo
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGlobalSettings
</UL>

<P><STRONG><a name="[140]"></a>EE_WriteByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eeprom.o(i.EE_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGlobalSettings
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Restore
</UL>

<P><STRONG><a name="[141]"></a>EE_WriteByteArray</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, eeprom.o(i.EE_WriteByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EE_WriteByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_WriteCoordData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGlobalSettings
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreBuildInfo
</UL>

<P><STRONG><a name="[ab]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[77]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[138]"></a>FifoUsart_Available</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fifo_usart.o(i.FifoUsart_Available))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
</UL>

<P><STRONG><a name="[97]"></a>FifoUsart_Get</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fifo_usart.o(i.FifoUsart_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FifoUsart_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getc
</UL>

<P><STRONG><a name="[153]"></a>FifoUsart_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo_usart.o(i.FifoUsart_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[e2]"></a>FifoUsart_Insert</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, fifo_usart.o(i.FifoUsart_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FifoUsart_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[7a]"></a>GC_ExecuteLine</STRONG> (Thumb, 3602 bytes, Stack size 176 bytes, gcode.o(i.GC_ExecuteLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = GC_ExecuteLine &rArr; MC_Arc &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_SyncPosition
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FlagWcoChange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Sync
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_WriteCoordData
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_ReadCoordData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_FeedbackMessage
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Float
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Dwell
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jog_Execute
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Sync
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_SetState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[93]"></a>GC_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gcode.o(i.GC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = GC_Init &rArr; Settings_ReadCoordData &rArr; Settings_WriteCoordData &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_ReadCoordData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_StatusMessage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>

<P><STRONG><a name="[8f]"></a>GC_SyncPosition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gcode.o(i.GC_SyncPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GC_SyncPosition &rArr; System_ConvertArraySteps2Mpos &rArr; System_ConvertAxisSteps2Mpos &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ConvertArraySteps2Mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_HomigCycle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[63]"></a>GPIO_InitGPIO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_gpio.o(i.GPIO_InitGPIO))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Init
</UL>

<P><STRONG><a name="[96]"></a>Getc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, print.o(i.Getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Getc &rArr; FifoUsart_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoUsart_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
</UL>

<P><STRONG><a name="[98]"></a>Grbl_loop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(i.Grbl_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = Grbl_loop &rArr; Protocol_MainLoop &rArr; System_ExecuteLine &rArr; GC_ExecuteLine &rArr; MC_Arc &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Reset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_InitMessage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_Reset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_SyncPosition
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_SyncPosition
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Grbl_setup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.Grbl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Grbl_setup &rArr; Settings_Init &rArr; Settings_Restore &rArr; Settings_WriteCoordData &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ResetPosition
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_motion_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
</UL>

<P><STRONG><a name="[71]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f1xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Erase
</UL>

<P><STRONG><a name="[72]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Erase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Program
</UL>

<P><STRONG><a name="[76]"></a>HAL_FLASH_Program</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Program
</UL>

<P><STRONG><a name="[70]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Erase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Program
</UL>

<P><STRONG><a name="[c7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_GetState
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GetState
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_GetState
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetControlState
</UL>

<P><STRONG><a name="[128]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
</UL>

<P><STRONG><a name="[66]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_WakeUp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetState
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_SetState
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PortResetISR
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_set
</UL>

<P><STRONG><a name="[78]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[14c]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_MspInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[b2]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ae]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[152]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[151]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b5]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b6]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 750 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14f]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b7]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, global.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SYSTICK_Callback &rArr; Limit_PinChangeISR &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GetState
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_PinChangeISR
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PinChangeISR
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetControlState
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bc]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SYSTICK_IRQHandler &rArr; HAL_SYSTICK_Callback &rArr; Limit_PinChangeISR &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Timer_init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_UART_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e3]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, global.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecAccessoryOverrideFlag
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoUsart_Insert
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecMotionOverrideFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[da]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, global.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>Jog_Execute</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, jog.o(i.Jog_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Jog_Execute &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_CheckTravelLimits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_WakeUp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetCurrentBlock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[b9]"></a>Limit_PinChangeISR</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, limits.o(i.Limit_PinChangeISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Limit_PinChangeISR &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecAlarm
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[ed]"></a>Limits_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, limits.o(i.Limits_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_HomigCycle
</UL>

<P><STRONG><a name="[b8]"></a>Limits_GetState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, limits.o(i.Limits_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Limits_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_PinChangeISR
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[e9]"></a>Limits_GoHome</STRONG> (Thumb, 590 bytes, Stack size 112 bytes, limits.o(i.Limits_GoHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Limits_GoHome &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Reset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecAlarm
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ClearExecStateFlag
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_GetStepPinMask
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GetState
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_WakeUp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ConvertArraySteps2Mpos
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_HomigCycle
</UL>

<P><STRONG><a name="[9c]"></a>Limits_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, limits.o(i.Limits_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Limits_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_Disable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_HomigCycle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
</UL>

<P><STRONG><a name="[ee]"></a>Limits_SoftCheck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, limits.o(i.Limits_SoftCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Limits_SoftCheck &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecAlarm
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_CheckTravelLimits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
</UL>

<P><STRONG><a name="[8e]"></a>MC_Arc</STRONG> (Thumb, 756 bytes, Stack size 112 bytes, motioncontrol.o(i.MC_Arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = MC_Arc &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[89]"></a>MC_Dwell</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motioncontrol.o(i.MC_Dwell))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = MC_Dwell &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[f3]"></a>MC_HomigCycle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motioncontrol.o(i.MC_HomigCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = MC_HomigCycle &rArr; Limits_GoHome &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_SyncPosition
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_SyncPosition
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_Disable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[8c]"></a>MC_Line</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, motioncontrol.o(i.MC_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_AutoCycleStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_CheckBufferFull
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_SoftCheck
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Sync
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jog_Execute
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[8d]"></a>MC_ProbeCycle</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, motioncontrol.o(i.MC_ProbeCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = MC_ProbeCycle &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_SyncPosition
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_ProbeParams
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_GetState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_ConfigureInvertMask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecAlarm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[df]"></a>MC_Reset</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, motioncontrol.o(i.MC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecAlarm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_SoftCheck
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_PinChangeISR
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PinChangeISR
</UL>

<P><STRONG><a name="[fc]"></a>MX_GPIO_Init</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>MX_TIM3_Init</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MX_TIM4_Init</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>Motor_Setting_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motor_setting.o(i.Motor_Setting_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Setting_init &rArr; Motor_set
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_set
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>Planner_BufferLine</STRONG> (Thumb, 612 bytes, Stack size 136 bytes, planner.o(i.Planner_BufferLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Planner_BufferLine &rArr; calculate_arm &rArr; return_angle &rArr; acos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_GetDirectionPinMask
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_NextBlockIndex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileNominalSpeed
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileParams
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
</UL>

<P><STRONG><a name="[f4]"></a>Planner_CheckBufferFull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, planner.o(i.Planner_CheckBufferFull))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
</UL>

<P><STRONG><a name="[108]"></a>Planner_ComputeProfileNominalSpeed</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, planner.o(i.Planner_ComputeProfileNominalSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Planner_ComputeProfileNominalSpeed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_UpdateVelocityProfileParams
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
</UL>

<P><STRONG><a name="[10e]"></a>Planner_CycleReinitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, planner.o(i.Planner_CycleReinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Planner_CycleReinitialize &rArr; Planner_Recalculate &rArr; Stepper_UpdatePlannerBlockParams &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_UpdatePlannerBlockParams
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
</UL>

<P><STRONG><a name="[110]"></a>Planner_DiscardCurrentBlock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, planner.o(i.Planner_DiscardCurrentBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Planner_DiscardCurrentBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_NextBlockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
</UL>

<P><STRONG><a name="[137]"></a>Planner_GetBlockBufferAvailable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(i.Planner_GetBlockBufferAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
</UL>

<P><STRONG><a name="[e5]"></a>Planner_GetCurrentBlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(i.Planner_GetCurrentBlock))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_AutoCycleStart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jog_Execute
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
</UL>

<P><STRONG><a name="[111]"></a>Planner_GetExecBlockExitSpeedSqr</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, planner.o(i.Planner_GetExecBlockExitSpeedSqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Planner_GetExecBlockExitSpeedSqr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_NextBlockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
</UL>

<P><STRONG><a name="[14a]"></a>Planner_GetSystemMotionBlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, planner.o(i.Planner_GetSystemMotionBlock))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
</UL>

<P><STRONG><a name="[9b]"></a>Planner_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, planner.o(i.Planner_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Planner_Init &rArr; Planner_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>

<P><STRONG><a name="[10a]"></a>Planner_NextBlockIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i.Planner_NextBlockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_UpdateVelocityProfileParams
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetExecBlockExitSpeedSqr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_DiscardCurrentBlock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
</UL>

<P><STRONG><a name="[f8]"></a>Planner_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, planner.o(i.Planner_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Planner_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ResetBuffer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
</UL>

<P><STRONG><a name="[114]"></a>Planner_ResetBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, planner.o(i.Planner_ResetBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Reset
</UL>

<P><STRONG><a name="[a0]"></a>Planner_SyncPosition</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(i.Planner_SyncPosition))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_HomigCycle
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
</UL>

<P><STRONG><a name="[115]"></a>Planner_UpdateVelocityProfileParams</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, planner.o(i.Planner_UpdateVelocityProfileParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Planner_UpdateVelocityProfileParams &rArr; Planner_ComputeProfileNominalSpeed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_NextBlockIndex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileNominalSpeed
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileParams
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
</UL>

<P><STRONG><a name="[116]"></a>PrintFloat</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, print.o(i.PrintFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PrintFloat &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_RateValue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_CoordValue
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GCodeModes
</UL>

<P><STRONG><a name="[119]"></a>PrintFloat_CoordValue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, print.o(i.PrintFloat_CoordValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PrintFloat_CoordValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AxisValue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
</UL>

<P><STRONG><a name="[11a]"></a>PrintFloat_RateValue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, print.o(i.PrintFloat_RateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PrintFloat_RateValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GCodeModes
</UL>

<P><STRONG><a name="[a4]"></a>Print_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, print.o(i.Print_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print_Init &rArr; Usart_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_setup
</UL>

<P><STRONG><a name="[11c]"></a>Printf_MSG</STRONG> (Thumb, 56 bytes, Stack size 152 bytes, print.o(i.Printf_MSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_InitMessage
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SettingPrefix
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AlarmMessage
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_ProbeParams
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_StatusMessage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_FeedbackMessage
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GrblHelp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GCodeModes
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_BuildInfo
</UL>

<P><STRONG><a name="[f6]"></a>Probe_ConfigureInvertMask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, probe.o(i.Probe_ConfigureInvertMask))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
</UL>

<P><STRONG><a name="[f7]"></a>Probe_GetState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, probe.o(i.Probe_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Probe_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_StateMonitor
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
</UL>

<P><STRONG><a name="[9d]"></a>Probe_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, probe.o(i.Probe_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Probe_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_ConfigureInvertMask
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>

<P><STRONG><a name="[9a]"></a>Probe_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, probe.o(i.Probe_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>

<P><STRONG><a name="[11e]"></a>Probe_StateMonitor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, probe.o(i.Probe_StateMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Probe_StateMonitor &rArr; Probe_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
</UL>

<P><STRONG><a name="[f5]"></a>Protocol_AutoCycleStart</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, protocol.o(i.Protocol_AutoCycleStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_AutoCycleStart
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetCurrentBlock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
</UL>

<P><STRONG><a name="[68]"></a>Protocol_BufferSynchronize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, protocol.o(i.Protocol_BufferSynchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_AutoCycleStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetCurrentBlock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FlagWcoChange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Sync
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_WriteCoordData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Dwell
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_Sync
</UL>

<P><STRONG><a name="[6d]"></a>Protocol_ExecRtSystem</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, protocol.o(i.Protocol_ExecRtSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Protocol_ExecRtSystem &rArr; Report_RealtimeStatus &rArr; calculate_forward &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_SyncPosition
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_SyncPosition
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ClearExecMotionOverride
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ClearExecAlarm
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ClearExecAccessoryOverrides
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AlarmMessage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_UpdatePlannerBlockParams
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_UpdateVelocityProfileParams
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_CycleReinitialize
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ClearExecStateFlag
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_WakeUp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetCurrentBlock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetState
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_FeedbackMessage
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_SetState
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
</UL>

<P><STRONG><a name="[6e]"></a>Protocol_ExecuteRealtime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocol.o(i.Protocol_ExecuteRealtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_HomigCycle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_SoftCheck
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
</UL>

<P><STRONG><a name="[a2]"></a>Protocol_MainLoop</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, protocol.o(i.Protocol_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = Protocol_MainLoop &rArr; System_ExecuteLine &rArr; GC_ExecuteLine &rArr; MC_Arc &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteStartup
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_CheckSafetyDoorAjar
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_AutoCycleStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GetState
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_StatusMessage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_FeedbackMessage
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>

<P><STRONG><a name="[117]"></a>Putc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, print.o(i.Putc))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SettingPrefix
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_LineFeed
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AxisValue
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_ProbeParams
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GCodeModes
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_BuildInfo
</UL>

<P><STRONG><a name="[129]"></a>ReadGlobalSettings</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, settings.o(i.ReadGlobalSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadGlobalSettings &rArr; EE_ReadByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadByteArray
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Init
</UL>

<P><STRONG><a name="[7c]"></a>Read_Float</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, util.o(i.Read_Float))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Read_Float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[121]"></a>Report_AlarmMessage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, report.o(i.Report_AlarmMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Report_AlarmMessage &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_LineFeed
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
</UL>

<P><STRONG><a name="[12e]"></a>Report_BuildInfo</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, report.o(i.Report_BuildInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Report_BuildInfo &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[91]"></a>Report_FeedbackMessage</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, report.o(i.Report_FeedbackMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Report_FeedbackMessage &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[130]"></a>Report_GCodeModes</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, report.o(i.Report_GCodeModes))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Report_GCodeModes &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_RateValue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[131]"></a>Report_GrblHelp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, report.o(i.Report_GrblHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Report_GrblHelp &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[132]"></a>Report_GrblSettings</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, report.o(i.Report_GrblSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Report_GrblSettings &rArr; report_util_float_setting &rArr; Report_SettingPrefix &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[a1]"></a>Report_InitMessage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, report.o(i.Report_InitMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Report_InitMessage &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>

<P><STRONG><a name="[135]"></a>Report_NgcParams</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, report.o(i.Report_NgcParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Report_NgcParams &rArr; Settings_ReadCoordData &rArr; Settings_WriteCoordData &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AxisValue
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_ProbeParams
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_ReadCoordData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_StatusMessage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_CoordValue
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[f9]"></a>Report_ProbeParams</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, report.o(i.Report_ProbeParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Report_ProbeParams &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AxisValue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ConvertArraySteps2Mpos
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
</UL>

<P><STRONG><a name="[123]"></a>Report_RealtimeStatus</STRONG> (Thumb, 706 bytes, Stack size 88 bytes, report.o(i.Report_RealtimeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Report_RealtimeStatus &rArr; calculate_forward &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_LineFeed
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AxisValue
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetBlockBufferAvailable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_GetState
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GetState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetCurrentBlock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ConvertArraySteps2Mpos
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_GetState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetControlState
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_GetRealtimeRate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_GetState
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_RateValue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoUsart_Available
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
</UL>

<P><STRONG><a name="[94]"></a>Report_StatusMessage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, report.o(i.Report_StatusMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Report_StatusMessage &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_LineFeed
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>Settings_GetDirectionPinMask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(i.Settings_GetDirectionPinMask))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_GenerateStepDirInvertMasks
</UL>

<P><STRONG><a name="[ea]"></a>Settings_GetStepPinMask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(i.Settings_GetStepPinMask))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_GenerateStepDirInvertMasks
</UL>

<P><STRONG><a name="[a7]"></a>Settings_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, settings.o(i.Settings_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Settings_Init &rArr; Settings_Restore &rArr; Settings_WriteCoordData &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_StatusMessage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Restore
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGlobalSettings
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GrblSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_setup
</UL>

<P><STRONG><a name="[13d]"></a>Settings_ReadBuildInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, settings.o(i.Settings_ReadBuildInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Settings_ReadBuildInfo &rArr; Settings_StoreBuildInfo &rArr; EE_Program &rArr; EE_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadByteArray
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreBuildInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[7f]"></a>Settings_ReadCoordData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, settings.o(i.Settings_ReadCoordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Settings_ReadCoordData &rArr; Settings_WriteCoordData &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_WriteCoordData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
</UL>

<P><STRONG><a name="[13c]"></a>Settings_Restore</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, settings.o(i.Settings_Restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Settings_Restore &rArr; Settings_WriteCoordData &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_WriteCoordData
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteByte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Program
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGlobalSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[13e]"></a>Settings_StoreBuildInfo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, settings.o(i.Settings_StoreBuildInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Settings_StoreBuildInfo &rArr; EE_Program &rArr; EE_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteByteArray
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_ReadBuildInfo
</UL>

<P><STRONG><a name="[142]"></a>Settings_StoreGlobalSetting</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, settings.o(i.Settings_StoreGlobalSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Settings_StoreGlobalSetting &rArr; System_FlagWcoChange &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_ConfigureInvertMask
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_FlagWcoChange
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_GenerateStepDirInvertMasks
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGlobalSettings
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
</UL>

<P><STRONG><a name="[8b]"></a>Settings_WriteCoordData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, settings.o(i.Settings_WriteCoordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Settings_WriteCoordData &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteByteArray
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_ReadCoordData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Restore
</UL>

<P><STRONG><a name="[144]"></a>Spindle_ComputePwmValue</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, spindlecontrol.o(i.Spindle_ComputePwmValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Spindle_ComputePwmValue &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetState
</UL>

<P><STRONG><a name="[13a]"></a>Spindle_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spindlecontrol.o(i.Spindle_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
</UL>

<P><STRONG><a name="[9e]"></a>Spindle_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spindlecontrol.o(i.Spindle_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Spindle_Init &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Stop
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitGPIO
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
</UL>

<P><STRONG><a name="[146]"></a>Spindle_SetSpeed</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, spindlecontrol.o(i.Spindle_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetState
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
</UL>

<P><STRONG><a name="[90]"></a>Spindle_SetState</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, spindlecontrol.o(i.Spindle_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Spindle_SetState &rArr; Spindle_ComputePwmValue &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Stop
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetSpeed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Sync
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[fa]"></a>Spindle_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spindlecontrol.o(i.Spindle_Stop))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetState
</UL>

<P><STRONG><a name="[88]"></a>Spindle_Sync</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, spindlecontrol.o(i.Spindle_Sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Line
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[145]"></a>Spindle_Timer_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_tim.o(i.Spindle_Timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Init
</UL>

<P><STRONG><a name="[fb]"></a>Stepper_Disable</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stepper.o(i.Stepper_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PortResetISR
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Reset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
</UL>

<P><STRONG><a name="[143]"></a>Stepper_GenerateStepDirInvertMasks</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stepper.o(i.Stepper_GenerateStepDirInvertMasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Stepper_GenerateStepDirInvertMasks
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_GetDirectionPinMask
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_GetStepPinMask
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Reset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
</UL>

<P><STRONG><a name="[139]"></a>Stepper_GetRealtimeRate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stepper.o(i.Stepper_GetRealtimeRate))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
</UL>

<P><STRONG><a name="[a6]"></a>Stepper_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stepper.o(i.Stepper_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Stepper_Init &rArr; Stepper_Timer_init &rArr; HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitGPIO
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_setup
</UL>

<P><STRONG><a name="[149]"></a>Stepper_MainISR</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, stepper.o(i.Stepper_MainISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Stepper_MainISR &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe_StateMonitor
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>Stepper_PortResetISR</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stepper.o(i.Stepper_PortResetISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>Stepper_PrepareBuffer</STRONG> (Thumb, 1902 bytes, Stack size 80 bytes, stepper.o(i.Stepper_PrepareBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Stepper_PrepareBuffer &rArr; Spindle_ComputePwmValue &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetSystemMotionBlock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetExecBlockExitSpeedSqr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_DiscardCurrentBlock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_ComputeProfileNominalSpeed
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetCurrentBlock
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jog_Execute
</UL>

<P><STRONG><a name="[9f]"></a>Stepper_Reset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stepper.o(i.Stepper_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Stepper_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_GenerateStepDirInvertMasks
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
</UL>

<P><STRONG><a name="[148]"></a>Stepper_Timer_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hw_tim.o(i.Stepper_Timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Stepper_Timer_init &rArr; HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Init
</UL>

<P><STRONG><a name="[10f]"></a>Stepper_UpdatePlannerBlockParams</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stepper.o(i.Stepper_UpdatePlannerBlockParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Stepper_UpdatePlannerBlockParams &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_CycleReinitialize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
</UL>

<P><STRONG><a name="[e7]"></a>Stepper_WakeUp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stepper.o(i.Stepper_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stepper_WakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jog_Execute
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler &rArr; HAL_SYSTICK_Callback &rArr; Limit_PinChangeISR &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>SystemClock_Config</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>System_CheckSafetyDoorAjar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(i.System_CheckSafetyDoorAjar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System_CheckSafetyDoorAjar &rArr; System_GetControlState
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetControlState
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
</UL>

<P><STRONG><a name="[e4]"></a>System_CheckTravelLimits</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, system.o(i.System_CheckTravelLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System_CheckTravelLimits
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_SoftCheck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jog_Execute
</UL>

<P><STRONG><a name="[99]"></a>System_Clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system.o(i.System_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>

<P><STRONG><a name="[125]"></a>System_ClearExecAccessoryOverrides</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.System_ClearExecAccessoryOverrides))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
</UL>

<P><STRONG><a name="[122]"></a>System_ClearExecAlarm</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.System_ClearExecAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
</UL>

<P><STRONG><a name="[124]"></a>System_ClearExecMotionOverride</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.System_ClearExecMotionOverride))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
</UL>

<P><STRONG><a name="[ec]"></a>System_ClearExecStateFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system.o(i.System_ClearExecStateFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
</UL>

<P><STRONG><a name="[95]"></a>System_ConvertArraySteps2Mpos</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, system.o(i.System_ConvertArraySteps2Mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = System_ConvertArraySteps2Mpos &rArr; System_ConvertAxisSteps2Mpos &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ConvertAxisSteps2Mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_SyncPosition
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_ProbeParams
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
</UL>

<P><STRONG><a name="[150]"></a>System_ConvertAxisSteps2Mpos</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system.o(i.System_ConvertAxisSteps2Mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_ConvertAxisSteps2Mpos &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ConvertArraySteps2Mpos
</UL>

<P><STRONG><a name="[127]"></a>System_ExecuteLine</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, system.o(i.System_ExecuteLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = System_ExecuteLine &rArr; GC_ExecuteLine &rArr; MC_Arc &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_CheckSafetyDoorAjar
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_HomigCycle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_FeedbackMessage
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Float
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreBuildInfo
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Restore
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_ReadBuildInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GrblSettings
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GrblHelp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GCodeModes
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_BuildInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
</UL>

<P><STRONG><a name="[126]"></a>System_ExecuteStartup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i.System_ExecuteStartup))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_MainLoop
</UL>

<P><STRONG><a name="[8a]"></a>System_FlagWcoChange</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system.o(i.System_FlagWcoChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = System_FlagWcoChange &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_BufferSynchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
</UL>

<P><STRONG><a name="[ba]"></a>System_GetControlState</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, system.o(i.System_GetControlState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_GetControlState
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_CheckSafetyDoorAjar
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PinChangeISR
</UL>

<P><STRONG><a name="[a5]"></a>System_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.System_Init))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_setup
</UL>

<P><STRONG><a name="[bb]"></a>System_PinChangeISR</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, system.o(i.System_PinChangeISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = System_PinChangeISR &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetControlState
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[a8]"></a>System_ResetPosition</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.System_ResetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_setup
</UL>

<P><STRONG><a name="[e1]"></a>System_SetExecAccessoryOverrideFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system.o(i.System_SetExecAccessoryOverrideFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[e8]"></a>System_SetExecAlarm</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.System_SetExecAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_SoftCheck
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_PinChangeISR
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
</UL>

<P><STRONG><a name="[e0]"></a>System_SetExecMotionOverrideFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system.o(i.System_SetExecMotionOverrideFlag))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[92]"></a>System_SetExecStateFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system.o(i.System_SetExecStateFlag))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ExecuteLine
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSuspend
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_AutoCycleStart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_SoftCheck
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProbeCycle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
</UL>

<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, global.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TIM4_IRQHandler &rArr; Stepper_MainISR &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PortResetISR
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_MainISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d0]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
</UL>

<P><STRONG><a name="[ca]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>Usart_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hw_usart.o(i.Usart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoUsart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Init
</UL>

<P><STRONG><a name="[13f]"></a>WriteGlobalSettings</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, settings.o(i.WriteGlobalSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WriteGlobalSettings &rArr; EE_Program &rArr; EE_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteByteArray
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteByte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_Restore
</UL>

<P><STRONG><a name="[fe]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[154]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17c]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[17d]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[17e]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[11d]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>

<P><STRONG><a name="[15a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[156]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[157]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[158]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[159]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[15c]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[15d]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[15e]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[15b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[17f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[180]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[181]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[164]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[163]"></a>acos</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, acos.o(i.acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = acos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>

<P><STRONG><a name="[165]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
</UL>

<P><STRONG><a name="[166]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[ef]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
</UL>

<P><STRONG><a name="[104]"></a>calculate_arm</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, arm_motion.o(i.calculate_arm))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = calculate_arm &rArr; return_angle &rArr; acos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
</UL>

<P><STRONG><a name="[136]"></a>calculate_forward</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, arm_motion.o(i.calculate_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = calculate_forward &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
</UL>

<P><STRONG><a name="[6c]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
</UL>

<P><STRONG><a name="[106]"></a>convert_delta_vector_to_unit_vector</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, util.o(i.convert_delta_vector_to_unit_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = convert_delta_vector_to_unit_vector &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
</UL>

<P><STRONG><a name="[f1]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
</UL>

<P><STRONG><a name="[f0]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_ComputePwmValue
</UL>

<P><STRONG><a name="[82]"></a>hypot_f</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, util.o(i.hypot_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hypot_f &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[107]"></a>limit_value_by_axis_maximum</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, util.o(i.limit_value_by_axis_maximum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = limit_value_by_axis_maximum &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
</UL>

<P><STRONG><a name="[5f]"></a>lround</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lround.o(i.lround))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lround &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_motion_reset
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = main &rArr; Grbl_loop &rArr; Protocol_MainLoop &rArr; System_ExecuteLine &rArr; GC_ExecuteLine &rArr; MC_Arc &rArr; MC_Line &rArr; Spindle_Sync &rArr; Protocol_BufferSynchronize &rArr; Protocol_ExecuteRealtime &rArr; Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setting_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_setup
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grbl_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[167]"></a>return_angle</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, arm_motion.o(i.return_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = return_angle &rArr; acos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
</UL>

<P><STRONG><a name="[7e]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = round &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
</UL>

<P><STRONG><a name="[f2]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_forward
</UL>

<P><STRONG><a name="[83]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_arm
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limits_GoHome
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_PrepareBuffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Arc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[7d]"></a>trunc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, trunc.o(i.trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = trunc &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC_ExecuteLine
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings_StoreGlobalSetting
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c2]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c5]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c9]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[cb]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[cc]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[c3]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c4]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[38]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[d6]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; MC_Reset &rArr; Stepper_Disable &rArr; Stepper_PortResetISR
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d9]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[79]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[aa]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[109]"></a>Planner_ComputeProfileParams</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, planner.o(i.Planner_ComputeProfileParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Planner_ComputeProfileParams &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_UpdateVelocityProfileParams
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
</UL>

<P><STRONG><a name="[112]"></a>Planner_PrevBlockIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(i.Planner_PrevBlockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_Recalculate
</UL>

<P><STRONG><a name="[10b]"></a>Planner_Recalculate</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, planner.o(i.Planner_Recalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Planner_Recalculate &rArr; Stepper_UpdatePlannerBlockParams &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_UpdatePlannerBlockParams
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_NextBlockIndex
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_PrevBlockIndex
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_CycleReinitialize
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_BufferLine
</UL>

<P><STRONG><a name="[11f]"></a>Protocol_ExecRtSuspend</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, protocol.o(i.Protocol_ExecRtSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Protocol_ExecRtSuspend &rArr; Delay_sec &rArr;  Protocol_ExecuteRealtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecAccessoryOverrideFlag
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_CheckSafetyDoorAjar
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecRtSystem
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Disable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner_GetCurrentBlock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetExecStateFlag
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_SetState
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_FeedbackMessage
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_SetState
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolant_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_ExecuteRealtime
</UL>

<P><STRONG><a name="[12d]"></a>Report_AxisValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, report.o(i.Report_AxisValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Report_AxisValue &rArr; PrintFloat_CoordValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat_CoordValue
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_ProbeParams
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
</UL>

<P><STRONG><a name="[12c]"></a>Report_LineFeed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, report.o(i.Report_LineFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Report_LineFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_RealtimeStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_AlarmMessage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_StatusMessage
</UL>

<P><STRONG><a name="[13b]"></a>Report_SettingPrefix</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, report.o(i.Report_SettingPrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Report_SettingPrefix &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
</UL>

<P><STRONG><a name="[12f]"></a>report_util_feedback_line_feed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, report.o(i.report_util_feedback_line_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = report_util_feedback_line_feed &rArr; Report_LineFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_LineFeed
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_ProbeParams
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_FeedbackMessage
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_NgcParams
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GCodeModes
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_BuildInfo
</UL>

<P><STRONG><a name="[134]"></a>report_util_float_setting</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, report.o(i.report_util_float_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = report_util_float_setting &rArr; Report_SettingPrefix &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SettingPrefix
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_LineFeed
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GrblSettings
</UL>

<P><STRONG><a name="[133]"></a>report_util_uint8_setting</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, report.o(i.report_util_uint8_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = report_util_uint8_setting &rArr; Report_SettingPrefix &rArr; Printf_MSG &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SettingPrefix
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_LineFeed
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_MSG
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_GrblSettings
</UL>

<P><STRONG><a name="[103]"></a>Motor_set</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, motor_setting.o(i.Motor_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_set
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setting_init
</UL>

<P><STRONG><a name="[15f]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[155]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[161]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[160]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
